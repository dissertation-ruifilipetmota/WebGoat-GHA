name: "Main / Pull requests build"
on:
    pull_request:
        paths-ignore:
            - '.txt'
            - 'LICENSE'
            - 'docs/**'
        branches: [main]
    push:
        branches:
            - main

jobs:
    build:
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ ubuntu-latest ]  #, windows-latest, macos-latest
        steps:
            -   uses: actions/checkout@v3
                with:
                    fetch-depth: 0
            -   name: Set up JDK 11
                uses: actions/setup-java@v3
                with:
                    distribution: 'zulu'
                    java-version: 11
                    architecture: x64
            # -   name: Cache Maven packages
            #     uses: actions/cache@v4.0.0
            #     with:
            #         path: ~/.m2
            #         key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
            #         restore-keys: ${{ runner.os }}-m2-
            -   name: Mvn install
                run: mvn install -DskipTests -Dmaven.test.skip=true
#                run: mvn -DskipTests verify
#                run: mvn install -DskipTests -Dmaven.test.skip=true -T 1C
#            -   name: Build with Maven
#                run: mvn --no-transfer-progress compile
#            -   name: Spotbugs checkfile:///home/ruiftmota/Downloads/sonarqube-ruifilipetmota.2024-03-11.private-key.pem           
#                run: mvn --no-transfer-progress spotbugs:check

            -   name: List Folders and Files
                run: |
                    ls -R

            -   name: List Target Directories
                run: |
                    find . -type d -name "target" | grep -v "/\." | sed 's|^./||'


            -   name: Run SpotBugs
                run: mvn com.github.spotbugs:spotbugs-maven-plugin:spotbugs
            
            -   name: Archive production artifacts
                uses: actions/upload-artifact@v3
                with:
                    name: spotbugs-xml
                    path: |
                        target/spotbugsXml.xml

            -   name: Run PMD
                id: pmd
                uses: pmd/pmd-github-action@v2
                with:
                    rulesets: 'rulesets/java/quickstart.xml'
                    analyzeModifiedFilesOnly: false
            -   name: Upload SARIF file
                uses: github/codeql-action/upload-sarif@v3
                with:
                    sarif_file: pmd-report.sarif
            

            # -   name: SonarQube Scan
            #     uses: sonarsource/sonarqube-scan-action@master
            #     env:
            #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            #         SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }} 
            #     with:
            #         args: 
            #             -Dsonar.projectKey=${{ secrets.WEBGOAT_SONAR_PROJECT_KEY }}  
            #             -Dsonar.java.binaries="webgoat-server/target","webgoat-integration-tests/target","webwolf/target","webgoat-container/target","webgoat-lessons/vulnerable-components/target","webgoat-lessons/ssrf/target","webgoat-lessons/insecure-deserialization/target","webgoat-lessons/csrf/target","webgoat-lessons/chrome-dev-tools/target","webgoat-lessons/client-side-filtering/target","webgoat-lessons/bypass-restrictions/target","webgoat-lessons/auth-bypass/target","webgoat-lessons/http-proxies/target","webgoat-lessons/cross-site-scripting/target","webgoat-lessons/xxe/target","webgoat-lessons/html-tampering/target","webgoat-lessons/webgoat-lesson-template/target","webgoat-lessons/missing-function-ac/target","webgoat-lessons/challenge/target","webgoat-lessons/idor/target","webgoat-lessons/sql-injection/target","webgoat-lessons/http-basics/target","webgoat-lessons/cia/target","webgoat-lessons/crypto/target","webgoat-lessons/secure-passwords/target","webgoat-lessons/webwolf-introduction/target","webgoat-lessons/webgoat-introduction/target","webgoat-lessons/jwt/target","webgoat-lessons/insecure-login/target","webgoat-lessons/password-reset/target"
                        
                        # ,"./webgoat-container/target","./webgoat-integration-tests/target","./webgoat-lessons/auth-bypass/target","./webgoat-lessons/bypass-restrictions/target","./webgoat-lessons/challenge/target","./webgoat-lessons/chrome-dev-tools/target","./webgoat-lessons/cia/target","./webgoat-lessons/client-side-filtering/target","./webgoat-lessons/cross-site-scripting/target","./webgoat-lessons/crypto/target","./webgoat-lessons/csrf/target","./webgoat-lessons/html-tampering/target","./webgoat-lessons/http-basics/target","./webgoat-lessons/http-proxies/target","./webgoat-lessons/idor/target","./webgoat-lessons/insecure-deserialization/target","./webgoat-lessons/insecure-login/target","./webgoat-lessons/jwt/target","./webgoat-lessons/missing-function-ac/target","./webgoat-lessons/password-reset/target","./webgoat-lessons/secure-passwords/target","./webgoat-lessons/sql-injection/target","./webgoat-lessons/ssrf/target","./webgoat-lessons/vulnerable-components/target","./webgoat-lessons/webgoat-introduction/target","./webgoat-lessons/webgoat-lesson-template/target","./webgoat-lessons/webwolf-introduction/target","./webgoat-lessons/xxe/target","./webgoat-server/target","./webwolf/target"
                        
                        
            #-   name: Analyze with SonarQube
                # You can pin the exact commit or the version.
                # uses: SonarSource/sonarqube-scan-action@v1.1.0
            #    uses: SonarSource/sonarqube-scan-action@master
            #    env:
            #        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Generate a token on SonarQube, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
            #        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}   # add the URL of your instance to the secrets of this repo with the name SONAR_HOST_URL (Settings > Secrets > Actions > add new repository secret)
                #with:
                # Additional arguments for the sonarcloud scanner
                    #args:
                        #-Dsonar.java.binaries=webwolf/target/classes
                        #-Dsonar.exclusions=**/*.xml,**/*.properties
                        #-Dsonar.projectKey=${{ vars.WEBGOAT_SONAR_PROJECT_KEY }}
                        # Unique key of your project. You can find it in SonarQube > [my project] > Project Information (top-right menu)
                        # mandatory
                        #-Dsonar.java.binaries=target,webgoat-container/target,webgoat-integration-tests/target,webgoat-lessons/auth-bypass/target,webgoat-lessons/bypass-restrictions/target,webgoat-lessons/challenge/target,webgoat-lessons/chrome-dev-tools/target,webgoat-lessons/cia/target,webgoat-lessons/client-side-filtering/target,webgoat-lessons/cross-site-scripting/target,webgoat-lessons/crypto/target,webgoat-lessons/csrf/target,webgoat-lessons/html-tampering/target,webgoat-lessons/http-basics/target,webgoat-lessons/http-proxies/target,webgoat-lessons/idor/target,webgoat-lessons/insecure-deserialization/target,webgoat-lessons/insecure-login/target,webgoat-lessons/jwt/target,webgoat-lessons/missing-function-ac/target,webgoat-lessons/password-reset/target,webgoat-lessons/secure-passwords/target,webgoat-lessons/sql-injection/target,webgoat-lessons/ssrf/target,webgoat-lessons/vulnerable-components/target,webgoat-lessons/webgoat-introduction/target,webgoat-lessons/webgoat-lesson-template/target,webgoat-lessons/webwolf-introduction/target,webgoat-lessons/xxe/target,webgoat-server/target,webwolf/target
                        #-Dsonar.java.binaries=**/target/classes
                        #-Dsonar.java.binaries=.
                        # -Dsonar.report.export.path=sonar-report.json
                        #**/*.java,**/*.*
                        # Comma-separated paths to directories containing main source files.
                        #-Dsonar.sources= # optional, default is project base directory
                        # When you need the analysis to take place in a directory other than the one from which it was launched
                        #-Dsonar.projectBaseDir= # optional, default is .
                        # Comma-separated paths to directories containing test source files.
                        #-Dsonar.tests= # optional. For more info about Code Coverage, please refer to https://docs.sonarcloud.io/enriching/test-coverage/overview/
                        # Adds more detail to both client and server-side analysis logs, activating DEBUG mode for the scanner, and adding client-side environment variables and system properties to the server-side log of analysis report processing.
                        #-Dsonar.verbose= # optional, default is false

            -   name: Convert SonarQube report to SARIF
                run: |
                    npx sonarqube-to-sarif sonar-report.json > output.sarif

            -   name: Upload SARIF file
                uses: github/codeql-action/upload-sarif@v1
                with:
                    sarif_file: output.sarif
